unit MahBit8;

interface
//

uses SysUtils;

type
     {TBIT8 CLASS}
     TBit8 = class(TObject)
     private
       FValue1  : byte;
       FValue2  : byte;
     protected
       procedure _CheckBitNumber(ABitNumber : byte);    
     public
       function BitSet(ABitNumber : byte) : boolean;    
       procedure SetBit(ABitNumber : byte);
       procedure ClrBit(ABitNumber : byte);

       // Properties
       property AsByteO : byte read FValue1 write FValue1;
       property AsByteI : byte read FValue2 write FValue2;
     end;

// ------------------------------------------------------------------------
implementation

const C_BITVALARR : array [0..7] of longword =
                    ($00000001,$00000002,$00000004,$00000008,$00000010,
                     $00000020,$00000040,$00000080);

// =============================================
// Internal routine to validate bit number 0..7
// Will raise EConvertError Exception if fails
// =============================================

procedure TBit8._CheckBitNumber(ABitNumber : byte);
begin
  if not (ABitNumber in [0..7]) then
      raise EConvertError.Create(IntToStr(ABitNumber) +
                                 ' is not a valid bit number (0..7)');
end;


// ============================================
// Return true if bit number of Value is set
// ============================================

function TBit8.BitSet(ABitNumber : byte) : boolean;
begin
  _CheckBitNumber(ABitNumber);
  Result := FValue1 and C_BITVALARR[ABitNumber] = C_BITVALARR[ABitNumber];
end;


// ===============================================
// Set a bit (bit = 1) by bit number 0..7
// ===============================================

procedure TBit8.SetBit(ABitNumber : byte);
begin
  _CheckBitNumber(ABitNumber);
   FValue2 := longword(FValue2) or C_BITVALARR[ABitNumber];
end;


// ===============================================
// Clear a bit (bit = 0) by bit number 0..7
// ===============================================

procedure TBit8.ClrBit(ABitNumber : byte);
begin
  _CheckBitNumber(ABitNumber);
   FValue2 := (longword(FValue2) or C_BITVALARR[ABitNumber]) xor
             C_BITVALARR[ABitNumber];
end;

end.
