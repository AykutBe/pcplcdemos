FUNCTION_BLOCK BST_CCJOYA_400
NAME:BST_CCJOYA
FAMILY:BST
AUTHOR:SAM
//VERSION:'1.0'
//FB1025
// Typical-Attribute
{
  S7_tasklist:='OB100,OB101';
  S7_m_c:='true';
  S7_blockview:='big';
  S7_alarm_ui:='0'
}

// Parameterattribute
// S7_visible       visible/unvisible   (default='true')
// S7_m_c           WinCC - Tag         (default='false')
// S7_dynamic       Test mode           (default='false')
VAR_INPUT
    LOCK        {S7_dynamic:='true'}                            :   BOOL := FALSE;      // Interlock
    ERR_EXTERN  {S7_dynamic:='true'}                            :   BOOL := FALSE;      // External Error
    LIOP_SEL    {S7_dynamic:='true'}                            :   BOOL := TRUE;       // 0=Operator 1=Linking
    L_SIM         {S7_dynamic:='true'}                          :   BOOL := FALSE;      // 0=Normal 1=Simulation
    L_RESET     {S7_dynamic:='true'}                            :   BOOL := FALSE;      // 1=Reset Error Peripherie

    I_RILE      {S7_dynamic:='true';
                    S7_unit:='%'}                               :   REAL := 0.0;        // RI = 100%, LE = -100%
    I_UPDN      {S7_dynamic:='true';
                    S7_unit:='%'}                               :   REAL := 0.0;        // UP = 100%, DN = -100%
    I_PB        {S7_dynamic:='true'}                            :   BOOL := FALSE;      // 1=Pushbutton automatic
    negI_PB     {S7_dynamic:='true';
                S7_string_0 := 'No_negate'; 
                S7_string_1 := 'Negate'}                        :   BOOL := FALSE;      // Joystick action enabled

    DEADB       {S7_dynamic:='true';
                    S7_unit:='%'}                               :   REAL := 0.0;        // Dead band %
    LIMRLACT    {S7_dynamic:='true'}                            :   BOOL := FALSE;      // 1=Input Limit Right/Left active
    LIMUDACT    {S7_dynamic:='true'}                            :   BOOL := FALSE;      // 1=Input Limit Up/Dn active
    LIMRL       {S7_dynamic:='true';
                    S7_unit:='%'}                               :   REAL := 100.0;      // Limit Right/Left 0-100%
    LIMUD       {S7_dynamic:='true';
                    S7_unit:='%'}                               :   REAL := 100.0;      // Limit Up/Down 0-100%
    ONEDIR      {S7_dynamic:='true'}                            :   BOOL := FALSE;      // 1=One Direction at a time

    EnRL_SCALE      {S7_dynamic:='true'}                        :   BOOL := TRUE;  // RL Enable scaling Output value 
    RL_SCALE_FACTOR  {S7_dynamic:='true'; S7_unit:='%'}         :   REAL := 25.0;  // RL Scale value output [0-100%]

    EnUD_SCALE      {S7_dynamic:='true'}                        :   BOOL := TRUE;  // UD Enable scaling Output value 
    UD_SCALE_FACTOR  {S7_dynamic:='true'; S7_unit:='%'}         :   REAL := 25.0;  // UD Scale value output  [0-100%]

    SIM_RILE    {S7_dynamic:='true';
                    S7_unit:='%';
                    S7_m_c:='true'}                             :   REAL := 0.0;        // Simulation value RI = 100%, LE = -100%
    SIM_UPDN    {S7_dynamic:='true';
                    S7_unit:='%';
                    S7_m_c:='true'}                             :   REAL := 0.0;        // Simulation value UP = 100%, DN = -100%
    
    SAMPLE_T    {S7_sampletime:='true'}                         :   REAL := 1.0;        // Sample Time
    MSGLOCK     {S7_dynamic:='true'}                            :   BOOL := FALSE;      //Suppress messages

// Message blocks
    MSG1_EVID { S7_visible  :='false';
                S7_link     :='false';
                S7_param    :='false';
                S7_server   :='alarm_archiv';
                S7_a_type   :='alarm_8p'}                       :   DWORD :=0;
    MSG2_EVID { S7_visible  :='false';
                S7_link     :='false';
                S7_param    :='false';
                S7_server   :='alarm_archiv';
                S7_a_type   :='notify_8p'}                      :   DWORD :=0;
END_VAR

VAR_IN_OUT
    OP_dwCmd    {S7_dynamic := 'true'; S7_m_c := 'true'}        :   DWORD :=16#0;   // control word wincc
END_VAR

VAR_OUTPUT
    QdwState    {S7_dynamic:='true'; S7_m_c:='true'}            :   DWORD:=0;     // status wincc
        QbState AT QdwState : ARRAY [0..31] OF BOOL;
    QwState     {S7_dynamic:='true'}                            :   WORD:= 0; //0=center, 1=right, 2=up, 3=left, 4=down

    QVALRILE    {S7_dynamic:='true';
                     S7_m_c:='true'}                            :   REAL := 0.0;   // Value ri/le
    QCMDCRL     {S7_dynamic:='true'}                            :   BOOL := FALSE; // 1=Center Right/Left
    QCMDRI      {S7_dynamic:='true'}                            :   BOOL := FALSE; // 1=Right 
    QCMDLE      {S7_dynamic:='true'}                            :   BOOL := FALSE; // 1=Left
    QVALUPDN    {S7_dynamic:='true';
                     S7_m_c:='true'}                            :   REAL := 0.0;   // Value up/dn
    QCMDCUD     {S7_dynamic:='true'}                            :   BOOL := FALSE; // 1=Center Up/Down
    QCMDUP      {S7_dynamic:='true'}                            :   BOOL := FALSE; // 1=Up 
    QCMDDN      {S7_dynamic:='true'}                            :   BOOL := FALSE; // 1=Down
    
    QMAN_AUT    {S7_dynamic:='true'}                            :   BOOL := FALSE; // 0=Hand 1=Automatic
    QSIM        {S7_dynamic:='true'}                            :   BOOL := FALSE; // 1=Simulation is active
    QERR_RANGE  {S7_dynamic:='true'}                            :   BOOL := FALSE; // 1=Error range input value
    QLOCK       {S7_dynamic:='true'}                            :   BOOL := FALSE; // 1=Lock is active
    QERR        {S7_dynamic:='true'}                            :   BOOL := FALSE; // 1=ERROR
    QERR_EXT    {S7_dynamic:='true'}                            :   BOOL := FALSE; // 1=External Error

//Alarm
    MSG1_bDone  {S7_visible:='false'}                           :   BOOL; // A8P
    MSG1_bError {S7_visible:='false'}                           :   BOOL; // A8P
    MSG1_wState {S7_visible:='false'}                           :   WORD; // A8P
    MSG1_wAck   {S7_visible:='false'}                           :   WORD; // A8P
    MSG2_bDone  {S7_visible:='false'}                           :   BOOL; // N8P
    MSG2_bError {S7_visible:='false'}                           :   BOOL; // N8P
    MSG2_wState {S7_visible:='false'}                           :   WORD; // N8P
END_VAR

VAR   
    OP_dwCmdSTAT : DWORD;
     OPbCmd AT OP_dwCmdSTAT : ARRAY [0..31] OF BOOL;;
    
    A8P   : ALARM_8P;
    N8P   : NOTIFY_8P;
//Time stamp structure for alarm_t call
    STRUCT_TS : STRUCT     
        wFormat : WORD ; //time format
        aDT : ARRAY [1..8] OF DATE_AND_TIME;         //array date and time
    END_STRUCT ; 

// TAGS for Operation
    OP_RESET : BOOL := FALSE;
    
// TAGS for Edge detect
    L_RESET_OLD : BOOL := FALSE;

//Commands
    CMDRILE         : REAL := 0.0; //Command right/left
    CMDUPDN         : REAL := 0.0; //Command up/down
    CMDCLR          : BOOL := FALSE;
    CMDCUD          : BOOL := FALSE;
    CMDRI           : BOOL := FALSE;
    CMDUP           : BOOL := FALSE;
    CMDLE           : BOOL := FALSE;
    CMDDN           : BOOL := FALSE;
    
    vRL_SCALE_FACTOR  : REAL := 0.0;  // Scale value output RL [0-100%]
    vUD_SCALE_FACTOR  : REAL := 0.0;  // Scale value output UD [0-100%]


END_VAR

VAR_TEMP
    TOP_SI: STRUCT
          EV_CLASS  : BYTE;
          EV_NUM    : BYTE;
          PRIORITY  : BYTE;
          NUM       : BYTE;
          TYP2_3    : BYTE;
          TYP1      : BYTE;
          ZI1       : WORD;
          ZI2_3     : DWORD;
    END_STRUCT;
    
    START_UP_SI: STRUCT
          EV_CLASS  : BYTE;
          EV_NUM    : BYTE;
          PRIORITY  : BYTE;
          NUM       : BYTE;
          TYP2_3    : BYTE;
          TYP1      : BYTE;
          ZI1       : WORD;
          ZI2_3     : DWORD;
    END_STRUCT;
    iRet          : INT;
END_VAR

BEGIN;
// START UP =====================================================================
    iRet := SFC6 (TOP_SI:= TOP_SI, START_UP_SI:= START_UP_SI);
    IF (TOP_SI.NUM = 100 OR TOP_SI.NUM = 101) THEN
        CMDRILE := 0.0;
        CMDUPDN := 0.0;

        iRet    := 0;
    END_IF;
// END STARTUP ==================================================================

// Change lowbyte to highbyte for HMI command word ==================
    OP_dwCmdSTAT := OP_dwCmd;

// Begin: Operation functions ***************************************************
// ******************************************************************************

// MANUAL / AUTOMATIC Operation =======================================
    QMAN_AUT := TRUE;

// SIMULATION ON / OFF ==============================================
    QSIM := L_SIM;
    
// RESET Operation ==================================================
    IF (L_RESET AND NOT L_RESET_OLD) OR OPbCmd[24]  THEN
        OP_RESET := TRUE;
    ELSE
        OP_RESET := FALSE;
    END_IF;
    
// JOYSTICK AUTOMATIC ==================================================
    IF QMAN_AUT AND (I_PB XOR negI_PB) THEN
        IF EnRL_SCALE THEN
            CMDRILE := I_RILE * (vRL_SCALE_FACTOR/100.0);
        ELSE
            CMDRILE := I_RILE;
        END_IF;    
        IF EnUD_SCALE THEN
            CMDUPDN := I_UPDN * (vUD_SCALE_FACTOR/100.0);
        ELSE
            CMDUPDN := I_UPDN;
        END_IF;    
    ELSIF QMAN_AUT AND NOT (I_PB XOR negI_PB) THEN
        CMDRILE := 0.0;
        CMDUPDN := 0.0;
    END_IF;     
 
// JOYSTICK SIMULATION ==============================================
    IF QSIM THEN 
        CMDRILE := SIM_RILE;
        CMDUPDN := SIM_UPDN;
    ELSE
        SIM_RILE := CMDRILE ;
        SIM_UPDN := CMDUPDN ;
    END_IF;

// Correct for DeadBand ================================================

   IF ABS(CMDRILE) < DEADB THEN CMDRILE := 0.0; END_IF;
   IF ABS(CMDUPDN) < DEADB THEN CMDUPDN := 0.0; END_IF;

// One direction at a time ==========================================
    IF ONEDIR THEN
        IF ABS(CMDRILE) > ABS(CMDUPDN) THEN
            CMDUPDN := 0.0;
        ELSE 
            CMDRILE := 0.0;
        END_IF;
    END_IF;

// Configuration********* *******************************************************
    
    //Limit scaling factors
    IF      RL_SCALE_FACTOR < 0    THEN vRL_SCALE_FACTOR := 0; 
    ELSIF   RL_SCALE_FACTOR > 100  THEN vRL_SCALE_FACTOR := 100;
    ELSE                                 vRL_SCALE_FACTOR := RL_SCALE_FACTOR;
    END_IF;

    IF      UD_SCALE_FACTOR < 0    THEN vUD_SCALE_FACTOR := 0; 
    ELSIF   UD_SCALE_FACTOR > 100  THEN vUD_SCALE_FACTOR := 100;
    ELSE                                 vUD_SCALE_FACTOR := UD_SCALE_FACTOR;
    END_IF;
    
// END: Operation functions *****************************************************
// ******************************************************************************

// Check Errors ========================================================
    QERR_EXT := ERR_EXTERN;
    QERR_RANGE := (ABS(CMDRILE) > 100.0) OR (ABS(CMDUPDN) > 100.0);
    QLOCK    := LOCK AND ((CMDRILE > 0.0) OR (CMDUPDN > DEADB));
    
    IF (QERR_EXT OR QLOCK) THEN
        QERR    := TRUE;
        CMDRILE := 0.0;
        CMDUPDN := 0.0;
    END_IF;

// Manipulation of Command Values ===========================================

    CMDRILE     := CMDRILE;
    CMDUPDN     := CMDUPDN;

// Limit the joystick input ============================================

    IF LIMRLACT THEN  //limit right/left?
        IF CMDRILE > LIMRL THEN CMDRILE := LIMRL;
        ELSIF CMDRILE < -LIMRL THEN CMDRILE := -LIMRL;
        END_IF;
    END_IF;
    
    IF LIMRLACT THEN  //limit up/down
        IF CMDUPDN > LIMUD THEN CMDUPDN := LIMUD;
        ELSIF CMDUPDN < -LIMUD THEN CMDUPDN := -LIMUD;
        END_IF;
    END_IF;

// Output commands =====================================================

     IF NOT QERR THEN
         QVALRILE := CMDRILE;
         QVALUPDN := CMDUPDN;
    ELSE
         QVALRILE := 0.0;
         QVALUPDN := 0.0;
    END_IF;
                 
     QCMDRI   := NOT QERR AND (CMDRILE > 0.0);
     QCMDUP   := NOT QERR AND (CMDUPDN > 0.0);
     QCMDLE   := NOT QERR AND (CMDRILE < 0.0);
     QCMDDN   := NOT QERR AND (CMDUPDN < 0.0);
     QCMDCRL  :=     QERR OR  (CMDRILE = 0.0);
     QCMDCUD  :=     QERR OR  (CMDUPDN = 0.0);
                  
// RESET Errors ========================================================
    IF OP_RESET THEN
        QERR := FALSE;
    END_IF;

// Set State for HMI ===================================================
    QbState[0]  := 0;             
    QbState[1]  := QCMDRI;         // 1=Right
    QbState[2]  := QCMDUP;         // 1=Up
    QbState[3]  := QCMDLE;         // 1=Left
    QbState[4]  := QCMDDN;         // 1=Down
    QbState[5]  := QCMDCRL;        // 1=Center Left/Right (no command)
    QbState[6]  := QCMDCUD;        // 1=Center Up/Down (no command)
    QbState[7]  := 0;   
    QbState[8]  := 0;
    QbState[9]  := 0;
    QbState[10] := 0;
    QbState[11] := 0;  
    QbState[12] := QERR_RANGE;    // 1=Error range input value
    QbState[13] := 0;
    QbState[14] := 0;
    QbState[15] := 0;
    QbState[16] := QMAN_AUT;
    QbState[17] := NOT LIOP_SEL;  // 0=operator control enabled
    QbState[18] := QSIM;          // 0=Process 1=Simulation
    QbState[19] := 0;
    QbState[20] := 0;
    QbState[21] := 0;
    QbState[22] := 0;
    QbState[23] := 0;
    QbState[24] := QERR;          // 1=Error
    QbState[25] := QERR_EXT;      // 1=External Error
    QbState[26] := QLOCK;         // 1=Block Locked
    QbState[27] := LOCK;          // 1=INTERLOCK
    QbState[28] := 0;  
    QbState[29] := 0;  
    QbState[30] := 0;
    QbState[31] := 0;
    
// Alarm_8P ==============================================
    A8P(
        EN_R := 1,
        SIG_1 :=0,
        SIG_2 :=0,
        SIG_3 :=0,
        SIG_4 :=0,
        SIG_5 :=NOT MSGLOCK AND QLOCK,          // Interlock Error
        SIG_6 :=0,
        SIG_7 :=NOT MSGLOCK AND QERR_EXT,       // External Error
        SIG_8 :=NOT MSGLOCK AND QERR,           // General Error
        ID := w#16#eeee,
        EV_ID := MSG1_EVID,
        SEVERITY := w#16#40
    );
    MSG1_bDone := A8P.DONE;
    MSG1_bError := A8P.ERROR;
    MSG1_wState := A8P.STATUS;
    MSG1_wAck   := A8P.ACK_STATE;

// Notify_8P ==============================================
    N8P(
        SIG_1 :=NOT MSGLOCK AND QCMDRI,
        SIG_2 :=NOT MSGLOCK AND QCMDUP,
        SIG_3 :=NOT MSGLOCK AND QCMDLE,
        SIG_4 :=NOT MSGLOCK AND QCMDDN,
        SIG_5 :=NOT MSGLOCK AND LOCK,           // Interlock
        SIG_6 :=0,
        SIG_7 :=0,
        SIG_8 :=NOT MSGLOCK AND QSIM,           // Simulation
        ID := w#16#eeee,
        EV_ID := MSG2_EVID,
        SEVERITY := w#16#40 
    );
    MSG2_bDone := N8P.DONE;
    MSG2_bError := N8P.ERROR;
    MSG2_wState := N8P.STATUS;

// Set Tags for edge detect =====================================
    L_RESET_OLD := L_RESET;

//reset commands================================================
    OP_dwCmd := 16#0;
    
END_FUNCTION_BLOCK


