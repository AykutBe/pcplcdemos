FUNCTION_BLOCK BST_CCPB_400
NAME:BSTCCPB
FAMILY:BST
AUTHOR:SAM
//VERSION:'1.0'
//FB1022

// Typical-Attribute
{
  S7_tasklist   :='OB100,OB101';
  S7_m_c        :='true'       ;
  S7_blockview  :='big'
}

// Parameterattribute
// S7_visible       visible/unvisible   (default='true')
// S7_m_c           WinCC - Tag         (default='false')
// S7_dynamic       Test mode           (default='false')
VAR_INPUT
    IN          {S7_dynamic   :='true'   }  : BOOL := FALSE     ; // Pushbutton input
    negIN       {S7_dynamic   :='true'   ;
                 S7_string_0  :='Neg_OFF';
                 S7_string_1  :='Neg_ON' }  : BOOL := FALSE     ; // Negative input
    ERR_EXTERN  {S7_dynamic   :='true'   }  : BOOL := FALSE     ; // External Error
    LIOP_SEL    {S7_dynamic   :='true'   }  : BOOL := TRUE      ; // 0=Operator 1=Linking
    L_SIM       {S7_dynamic   :='true'   }  : BOOL := FALSE     ; // 0=Normal 1=Simulation
    L_RESET     {S7_dynamic   :='true'   }  : BOOL := FALSE     ; // 1=Reset Error Peripherie   
    SAMPLE_T    {S7_sampletime:='true'   }  : REAL := 1.0       ; // Sample  Time
    HOLD_T      {S7_dynamic   :='true'   }  : REAL := 2.0       ; // Holding Time

    LAMPTEST    {S7_dynamic   :='true'   }  : BOOL := FALSE     ; // Lamptest  

// Message blocks
    MSGLOCK     {S7_dynamic:='true'} : BOOL := FALSE; // 1=Suppress messages
    
    MSG1_EVID { S7_visible  :='false'    ;
                S7_link     :='false'    ;
                S7_param    :='false'    ;
                S7_server   :='alarm_archiv';
                S7_a_type   :='alarm_8p' }  : DWORD :=0;
    MSG2_EVID { S7_visible  :='false'    ;
                S7_link     :='false'    ;
                S7_param    :='false'    ;
                S7_server   :='alarm_archiv';
                S7_a_type   :='notify_8p'}  : DWORD :=0;
END_VAR

VAR_IN_OUT
    OP_dwCmd    {S7_dynamic  := 'true'   ;
                 S7_visible  :='false'   ;
                 S7_m_c      := 'true'   }  : DWORD :=16#0      ; // control word wincc
END_VAR

VAR_OUTPUT
    QdwState    {S7_dynamic  :='true'    ; 
                 S7_m_c      :='true'    }  : DWORD:= 0         ; // status wincc
        QbState AT QdwState : ARRAY [0..31] OF BOOL;
    
    QIN         {S7_dynamic  :='true'    }  : BOOL := FALSE     ; // Input Signal
    QOUT        {S7_dynamic  :='true'    }  : BOOL := FALSE     ; // 1= Input Signal is On     
    QOUT_HOLD   {S7_dynamic  :='true'    }  : BOOL := FALSE     ; // 1= Input Signal is On
    QOUT_SR     {S7_dynamic  :='true'    }  : BOOL := FALSE     ; // 1= Set/Reset is On
    QOFF        {S7_dynamic  :='true'    }  : BOOL := FALSE     ; // 1= Input Signal is OFF
    QMAN_AUT    {S7_dynamic  :='true'    }  : BOOL := FALSE     ; // 0= Hand 1=Automatic
    QSIM        {S7_dynamic  :='true'    }  : BOOL := FALSE     ; // 1= Simulation is active
    QERR        {S7_dynamic  :='true'    }  : BOOL := FALSE     ; // 1= ERROR (AUTO RESET)
    QERR_EXT    {S7_dynamic  :='true'    }  : BOOL := FALSE     ; // 1= External Error (AUTO RESET)

//Alarm
    MSG1_bDone  {S7_visible  :='false'   }  : BOOL              ; // A8P
    MSG1_bError {S7_visible  :='false'   }  : BOOL              ; // A8P
    MSG1_wState {S7_visible  :='false'   }  : WORD              ; // A8P
    MSG1_wAck   {S7_visible  :='false'   }  : WORD              ; // A8P
    MSG2_bDone  {S7_visible  :='false'   }  : BOOL              ; // N8P
    MSG2_bError {S7_visible  :='false'   }  : BOOL              ; // N8P
    MSG2_wState {S7_visible  :='false'   }  : WORD              ; // N8P
END_VAR

VAR   
    OP_dwCmdSTAT : DWORD;
     OPbCmd AT OP_dwCmdSTAT : ARRAY [0..31] OF BOOL;
    
    A8P   : ALARM_8P;
    N8P   : NOTIFY_8P;
//Time stamp structure for alarm_t call
    STRUCT_TS   : STRUCT     
        wFormat : WORD  ; //time format
            aDT : ARRAY [1..8] OF DATE_AND_TIME;         //array date and time
    END_STRUCT ; 
//Commands
    CMDON       : BOOL := FALSE ; // On Command
    CMDBLNK1    : BOOL := FALSE ; // 0.5 blinking Command
    CMDBLNK2    : BOOL := FALSE ; // 1   blinking Command
    CMDBLNK3    : BOOL := FALSE ; // 3   blinking Command
    
// TAGS for Operation´
    OP_RESET    : BOOL := FALSE ; // xx
// TAGS for Edge detect
    L_RESET_OLD : BOOL := FALSE ; // Reset positive flank
    IN_OLD      : BOOL := FALSE ; // Input signal positive flank
    vHold_T     : REAL := 0.0   ; // Push Button actual Holding time
    IN_SIM      : BOOL          ; // xx
    P1S         : PulseL        ; // 0.5 sec Pulse function
    P2S         : PulseL        ; // 1   sec Pulse function
    P5S         : PulseL        ; // 3   sec Pulse function


END_VAR

VAR_TEMP
    TOP_SI: STRUCT
          EV_CLASS  : BYTE ;
          EV_NUM    : BYTE ;
          PRIORITY  : BYTE ;
          NUM       : BYTE ;
          TYP2_3    : BYTE ;
          TYP1      : BYTE ;
          ZI1       : WORD ;
          ZI2_3     : DWORD;
    END_STRUCT;
    
    START_UP_SI: STRUCT
          EV_CLASS  : BYTE ;
          EV_NUM    : BYTE ;
          PRIORITY  : BYTE ;
          NUM       : BYTE ;
          TYP2_3    : BYTE ;
          TYP1      : BYTE ;
          ZI1       : WORD ;
          ZI2_3     : DWORD;
    END_STRUCT;
    iRet            : INT  ;
END_VAR

BEGIN;
// START UP ========================================================================================================================
    iRet := SFC6 (TOP_SI:= TOP_SI, START_UP_SI:= START_UP_SI);
    IF (TOP_SI.NUM = 100 OR TOP_SI.NUM = 101) THEN
        CMDON       := FALSE    ;
        CMDBLNK1    := FALSE    ;
        CMDBLNK2    := FALSE    ;
        CMDBLNK3    := FALSE    ;
        P1S.PT      := t#0.5S   ;
        P2S.PT      := t#1S     ;
        P5S.PT      := t#3S     ;
        IN_OLD      := FALSE    ;
        vHold_T     := 0.0      ;
        
        iRet        := 0        ;
    END_IF;
// END STARTUP =====================================================================================================================

// Change lowbyte to highbyte for HMI command word =====================
    OP_dwCmdSTAT := OP_dwCmd;

// Begin: Operation functions ******************************************
// *********************************************************************************************************************************
    
// Pulse functions    
    P1S();
    P2S();
    P5S();

// SIMULATION ON / OFF =================================================
    QSIM := L_SIM;

// TOGGLE Simulation Bit ===============================================
    IF (OPbCmd[5] AND QSIM) THEN
        IN_SIM := NOT IN_SIM;
    END_IF;
// END: Operation functions ********************************************************************************************************


// MANUAL / AUTOMATIC Operation ========================================
    IF (OPbCmd[16] AND NOT LIOP_SEL) THEN 
        QMAN_AUT := FALSE   ;
    ELSIF LIOP_SEL OR (OPbCmd[17] AND NOT LIOP_SEL) THEN 
        QMAN_AUT := TRUE    ;
    END_IF;


// RESET Operation =====================================================
    IF (L_RESET AND NOT L_RESET_OLD) OR (OPbCmd[24]) THEN
        OP_RESET := TRUE    ;
    ELSE
        OP_RESET := FALSE   ;
    END_IF;
 
// Input from command WORD =============================================
 
    IF NOT QMAN_AUT THEN

        IF OPbCmd[0] THEN
            CMDON    := false;
            CMDBLNK1 := false;    
            CMDBLNK2 := false;
            CMDBLNK3 := false;
        END_IF;

        IF OPbCmd[1] THEN
            CMDON    := true;

            CMDBLNK1 := false;    
            CMDBLNK2 := false;
            CMDBLNK3 := false;
        END_IF;
        
        IF OPbCmd[2] THEN
            CMDBLNK1 := true;    

            CMDON    := false;
            CMDBLNK2 := false;
            CMDBLNK3 := false;

        END_IF;

        IF OPbCmd[3] THEN
            CMDBLNK2 := true;

            CMDON    := false;
            CMDBLNK1 := false;    
            CMDBLNK3 := false;
        END_IF;

        IF OPbCmd[4] THEN
            CMDBLNK3 := true;

            CMDON    := false;
            CMDBLNK1 := false;    
            CMDBLNK2 := false;

        END_IF;
    END_IF;

    IF QMAN_AUT THEN
            CMDON    := false;
            CMDBLNK1 := false;    
            CMDBLNK2 := false;
            CMDBLNK3 := false;
    END_IF; 
  
// END: Operation functions ********************************************
// *********************************************************************************************************************************

// Check Errors ========================================================
    QERR_EXT := ERR_EXTERN;
    QERR     := QERR_EXT;
   
// bumpless switch to simulation mode ==================================
      
    IF NOT QSIM THEN
        IN_SIM := QIN;  
    END_IF;

// Write Output ========================================================

    QIN   := ((IN XOR negIN) AND NOT QSIM) OR 
              (QSIM AND IN_SIM)             ; 
            
    IF  Lamptest THEN
        QOUT := Lamptest;
    ELSIF   CMDBLNK3 THEN
        QOUT := (CMDBLNK3 AND P5S.Q);
    ELSIF   CMDBLNK2 THEN
        QOUT := (CMDBLNK2 AND P2S.Q);
    ELSIF   CMDBLNK1 THEN 
        QOUT := (CMDBLNK1 AND P1S.Q);
    ELSIF   (NOT QERR AND QIN) OR CMDON THEN
        QOUT := (NOT QERR AND QIN) OR CMDON;
    ELSE
        QOUT := FALSE;
    END_IF;
            
 // Output Set/Reset-element
    IF (QIN AND NOT IN_OLD) THEN 
        QOUT_SR := NOT QOUT_SR;
    END_IF;

 // Output holding
    IF (QIN AND NOT IN_OLD) OR (NOT QIN AND IN_OLD) OR QOUT_HOLD THEN
        QOUT_HOLD := True;    
        vHold_T := vHold_T + SAMPLE_T;
    END_IF;
    
    IF (vHold_T > HOLD_T) THEN
        QOUT_HOLD   := FALSE;
        vHold_T     := 0.0;
    END_IF;
  
 // Set Output
    QOFF  := NOT QOUT;   


// RESET Errors ========================================================
    IF OP_RESET THEN
        QERR := FALSE;
    END_IF;

// Set State for HMI ===================================================
    QbState[0]  := QIN           ; //Button state Output signal
    QbState[1]  := CMDON         ; //Command Steady On
    QbState[2]  := CMDBLNK1      ; //Command Blink
    QbState[3]  := CMDBLNK2      ; //Command Blink slow
    QbState[4]  := CMDBLNK3      ; //Command Blink fast
    QbState[5]  := 0;
    QbState[6]  := 0;
    QbState[7]  := 0;   
    QbState[8]  := 0;
    QbState[9]  := 0;
    QbState[10]  := IN;             // IO information
    QbState[11]  := 0;
    QbState[12]  := QOUT;           // IO information
    QbState[13]  := QOUT_HOLD;      // Pulsed output
    QbState[14]  := 0;
    QbState[15]  := 0;
    QbState[16]  := QMAN_AUT      ; // 0=Manual 1=Automatic            
    QbState[17]  := NOT LIOP_SEL  ; // 0=Operator control enabled
    QbState[18]  := QSIM          ; // 0=Process 1=Simulation
    QbState[19]  := 0;
    QbState[20]  := 0;
    QbState[21]  := 0;
    QbState[22]  := 0;
    QbState[23]  := 0;
    QbState[24]  := QERR          ; // 1=Error
    QbState[25]  := QERR_EXT      ; // 1=External Error
    QbState[26]  := 0;
    QbState[27]  := 0;
    QbState[28]  := 0;  
    QbState[29]  := 0;  
    QbState[30]  := 0;
    QbState[31]  := 0;
    
// Alarm_8P ============================================================
    A8P(
        EN_R  := 1,
        SIG_1 := 0,
        SIG_2 := 0,
        SIG_3 := 0,
        SIG_4 := 0,
        SIG_5 := 0,         
        SIG_6 := 0,
        SIG_7 := NOT MSGLOCK AND QERR_EXT           , // External Error
        SIG_8 := NOT MSGLOCK AND QERR               , // General  Error
        ID    := w#16#eeee,
        EV_ID := MSG1_EVID,
        SEVERITY := w#16#40
    );
    MSG1_bDone   := A8P.DONE        ;
    MSG1_bError  := A8P.ERROR       ;
    MSG1_wState  := A8P.STATUS      ;
    MSG1_wAck    := A8P.ACK_STATE   ;

// Notify_8P ================================================================
    N8P(
        SIG_1 := NOT MSGLOCK AND (CMDON OR CMDBLNK1 OR CMDBLNK2 OR CMDBLNK3), // BLINK COMMAND
        SIG_2 := NOT MSGLOCK AND QIN,                                         // Inputsignal out
        SIG_3 := 0,
        SIG_4 := 0,
        SIG_5 := 0,           
        SIG_6 := 0,
        SIG_7 := 0,
        SIG_8 := NOT MSGLOCK AND QSIM               , // Simulation
        ID    := w#16#eeee,
        EV_ID := MSG2_EVID,
        SEVERITY := w#16#40 
    );
    MSG2_bDone   := N8P.DONE        ;
    MSG2_bError  := N8P.ERROR       ;
    MSG2_wState  := N8P.STATUS      ;

// Set Tags for edge detect ============================================
    L_RESET_OLD  := L_RESET         ;
    IN_OLD       := QIN             ;

//reset commands =======================================================
    OP_dwCmd    := 16#0             ;

    
END_FUNCTION_BLOCK





